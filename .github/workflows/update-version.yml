name: Update Version Information from PotatoVN

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PotatoVN.Doc repository
      uses: actions/checkout@v4

    - name: Clone PotatoVN source repository
      run: |
        git clone https://github.com/GoldenPotato137/PotatoVN.git temp_potatovn

    - name: Install xmlstarlet
      run: |
        sudo apt-get update
        sudo apt-get install -y xmlstarlet

    - name: Get 'released' branch version
      id: released_version
      working-directory: ./temp_potatovn
      run: |
        git checkout released
        
        # 关键修正：使用 -N 选项来处理 XML 命名空间
        # -N x="http://..."  -> 将默认命名空间 URI 绑定到前缀 'x'
        # /x:Package/x:Identity/@Version -> 在 XPath 中使用此前缀
        # 这是解析带有命名空间的 XML 文件的标准且健壮的方法
        version=$(xmlstarlet sel \
          -N x="http://schemas.microsoft.com/appx/manifest/foundation/windows10" \
          -t -v "/x:Package/x:Identity/@Version" \
          GalgameManager/Package.appxmanifest)
        
        echo "Found released version: $version"
        if [ -z "$version" ]; then
          echo "Error: Could not extract version number. Check XPath and namespaces."
          exit 1
        fi
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Get msstore released version
      id: msstore_released_version
      run: |
        pip install requests beautifulsoup4
        version=$(python script/get-msstore-version.py)
        echo "Found msstore released version: $version"
        if [ -z "$version" ]; then
          echo "Error: Could not extract version number from msstore."
          exit 1
        fi
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Get 'flight-released' branch version
      id: flight_released_version
      working-directory: ./temp_potatovn
      run: |
        git checkout flight-released
        
        # 同样使用处理了命名空间的 xmlstarlet 命令
        version=$(xmlstarlet sel \
          -N x="http://schemas.microsoft.com/appx/manifest/foundation/windows10" \
          -t -v "/x:Package/x:Identity/@Version" \
          GalgameManager/Package.appxmanifest)

        echo "Found flight-released version: $version"
        if [ -z "$version" ]; then
          echo "Error: Could not extract version number. Check XPath and namespaces."
          exit 1
        fi
        echo "version=$version" >> $GITHUB_OUTPUT
        
    - name: Create or Update version.json
      run: |
        mkdir -p public
        cat > public/version.json << EOF
        {
          "released": "${{ steps.released_version.outputs.version }}",
          "flight-released": "${{ steps.flight_released_version.outputs.version }}",
          "released-msstore": "${{ steps.msstore_released_version.outputs.version }}"
        }
        EOF
        echo "Generated public/version.json:"
        cat public/version.json

    - name: Commit and push changes
      id: push_changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add public/version.json
        
        if git diff --staged --quiet; then
          echo "No changes to commit. version.json is up-to-date."
        else
          git commit -m "chore(version): Update version.json" -m "Released: ${{ steps.released_version.outputs.version }}, Flight-released: ${{ steps.flight_released_version.outputs.version }}, Released-msstore: ${{ steps.msstore_released_version.outputs.version }}"
          git push
          echo "Changes have been committed and pushed."
        fi
        
    - name: Cleanup temporary repository
      if: always()
      run: |
        rm -rf temp_potatovn

    - name: Trigger the doc-build-deploy workflow
      if: steps.push_changes.outputs.triggered == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Triggering the Build & Deploy workflow..."
        gh workflow run doc-build-deploy.yml --ref main
