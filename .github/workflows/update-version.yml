name: Update Version Information from PotatoVN

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PotatoVN.Doc repository
      uses: actions/checkout@v4

    - name: Clone PotatoVN source repository
      run: |
        git clone https://github.com/GoldenPotato137/PotatoVN.git temp_potatovn

    # 新增步骤：安装 xmlstarlet，这是一个健壮的XML处理工具
    - name: Install xmlstarlet
      run: |
        sudo apt-get update
        sudo apt-get install -y xmlstarlet

    - name: Get 'released' branch version
      id: released_version
      working-directory: ./temp_potatovn
      run: |
        git checkout released
        
        # 关键修正：使用 xmlstarlet 来解析 XML，而不是 sed
        # 'xmlstarlet sel' -> select (查询)
        # '-t' -> template (模板)
        # '-v' -> value-of (提取值)
        # "'/Package/Identity/@Version'" -> XPath 路径，表示：
        #   从根节点 (/) 开始
        #   找到 <Package> 元素
        #   找到其下的 <Identity> 元素
        #   提取 (@) 名为 Version 的属性值
        version=$(xmlstarlet sel -t -v "/Package/Identity/@Version" GalgameManager/Package.appxmanifest)
        
        echo "Found released version: $version"
        # 增加一个检查，如果版本号为空则报错，防止静默失败
        if [ -z "$version" ]; then
          echo "Error: Could not extract version number."
          exit 1
        fi
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Get 'flight-released' branch version
      id: flight_released_version
      working-directory: ./temp_potatovn
      run: |
        git checkout flight-released
        
        # 同样使用健壮的 xmlstarlet
        version=$(xmlstarlet sel -t -v "/Package/Identity/@Version" GalgameManager/Package.appxmanifest)

        echo "Found flight-released version: $version"
        if [ -z "$version" ]; then
          echo "Error: Could not extract version number."
          exit 1
        fi
        echo "version=$version" >> $GITHUB_OUTPUT
        
    - name: Create or Update version.json
      run: |
        mkdir -p public
        cat > public/version.json << EOF
        {
          "released": "${{ steps.released_version.outputs.version }}",
          "flight-released": "${{ steps.flight_released_version.outputs.version }}"
        }
        EOF
        echo "Generated public/version.json:"
        cat public/version.json

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add public/version.json
        
        if git diff --staged --quiet; then
          echo "No changes to commit. version.json is up-to-date."
        else
          git commit -m "chore(version): Update version.json" -m "Released: ${{ steps.released_version.outputs.version }}, Flight-released: ${{ steps.flight_released_version.outputs.version }}"
          git push
          echo "Changes have been committed and pushed."
        fi
        
    - name: Cleanup temporary repository
      if: always()
      run: |
        rm -rf temp_potatovn
