name: Update Version Information from PotatoVN

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PotatoVN.Doc repository
      uses: actions/checkout@v4

    - name: Clone PotatoVN source repository
      run: |
        git clone https://github.com/GoldenPotato137/PotatoVN.git temp_potatovn

    - name: Get 'released' branch version
      id: released_version
      working-directory: ./temp_potatovn
      run: |
        git checkout released
        # 关键修正：使用更精确的 sed 命令，只匹配 <Identity> 标签中的 Version
        # 's/^\s*<Identity.*Version="\([^"]*\)".*/\1/p'
        #   ^          - 匹配行首
        #   \s*        - 匹配零个或多个空格
        #   <Identity - 精确匹配标签
        # 这可以确保我们只拿到应用程序的主版本号
        version=$(sed -n 's/^\s*<Identity.*Version="\([^"]*\)".*/\1/p' GalgameManager/Package.appxmanifest)
        echo "Found released version: $version"
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Get 'flight-released' branch version
      id: flight_released_version
      working-directory: ./temp_potatovn
      run: |
        git checkout flight-released
        # 同样使用修正后的精确 sed 命令
        version=$(sed -n 's/^\s*<Identity.*Version="\([^"]*\)".*/\1/p' GalgameManager/Package.appxmanifest)
        echo "Found flight-released version: $version"
        echo "version=$version" >> $GITHUB_OUTPUT
        
    - name: Create or Update version.json
      run: |
        mkdir -p public
        cat > public/version.json << EOF
        {
          "released": "${{ steps.released_version.outputs.version }}",
          "flight-released": "${{ steps.flight_released_version.outputs.version }}"
        }
        EOF
        echo "Generated public/version.json:"
        cat public/version.json

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add public/version.json
        
        if git diff --staged --quiet; then
          echo "No changes to commit. version.json is up-to-date."
        else
          git commit -m "chore(version): Update version.json" -m "Released: ${{ steps.released_version.outputs.version }}, Flight-released: ${{ steps.flight_released_version.outputs.version }}"
          git push
          echo "Changes have been committed and pushed."
        fi
        
    - name: Cleanup temporary repository
      if: always()
      run: |
        rm -rf temp_potatovn
